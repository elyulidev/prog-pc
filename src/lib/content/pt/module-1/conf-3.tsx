import { CodeBlock } from "@/components/code-block";
import { Callout } from "@/components/lecture/callout";
import { LectureSection } from "@/components/lecture/lecture-section";
import { Task } from "@/components/lecture/task";
import {
	GitCommit,
	GitCompare,
	GitFork,
	GitMerge,
	RotateCcw,
	FunctionSquare,
	Blocks,
	Package,
	Box,
	ShieldCheck,
	Repeat,
	SkipForward,
	StopCircle,
	FileCode,
	PlayCircle,
	BookOpen,
	Clock,
	Users,
	User,
} from "lucide-react";
import React from "react";

const FeatureCard = ({
	icon,
	title,
	children,
	className,
}: {
	icon: React.ReactNode;
	title: string;
	children: React.ReactNode;
	className?: string;
}) => (
	<div
		className={`rounded-lg border bg-card/50 p-6 backdrop-blur-sm ${className} overflow-auto`}
	>
		<div className='flex items-start gap-4'>
			<div className='rounded-lg bg-primary/10 p-2 text-primary'>{icon}</div>
			<div>
				<h3 className='text-xl font-bold font-headline'>{title}</h3>
				<div className='prose prose-lg max-w-none text-muted-foreground p-3'>
					{children}
				</div>
			</div>
		</div>
	</div>
);

const LecturePage = () => {
	return (
		<main className='space-y-16'>
			{/* Conference Header */}
			<header className='relative overflow-hidden rounded-lg bg-primary/5 p-8'>
				<div className='relative z-10'>
					<p className='mb-2 font-semibold text-primary'>
						M√≥dulo I: Fundamentos de Python e L√≥gica Algor√≠tmica
					</p>
					<h1 className='text-4xl font-bold tracking-tight lg:text-5xl font-headline'>
						Confer√™ncia 3: Estruturas de Controlo de Fluxo e Modularidade
					</h1>
					<p className='mt-4 max-w-3xl text-lg text-muted-foreground'>
						Nesta confer√™ncia, vamos mergulhar nos pilares da programa√ß√£o:
						Estruturas de Controlo de Fluxo e Modularidade. Aprenda a criar
						programas que tomam decis√µes, repetem tarefas e s√£o organizados de
						forma eficiente.
					</p>
					<div className='mt-6 flex flex-wrap gap-x-8 gap-y-4 text-sm text-muted-foreground'>
						<div className='flex items-center gap-2'>
							<User className='h-4 w-4' />
							<span>
								<strong>Palestrante:</strong> Project IDX
							</span>
						</div>
						<div className='flex items-center gap-2'>
							<Clock className='h-4 w-4' />
							<span>
								<strong>Dura√ß√£o:</strong> 90 Minutos
							</span>
						</div>
						<div className='flex items-center gap-2'>
							<Users className='h-4 w-4' />
							<span>
								<strong>P√∫blico-Alvo:</strong> Iniciantes em Programa√ß√£o
							</span>
						</div>
					</div>
				</div>
			</header>

			{/* Block 1: Introduction */}
			<LectureSection
				title='Bloco 1: Introdu√ß√£o'
				subtitle='Al√©m do caminho linear'
			>
				<div className='grid grid-cols-1 gap-8 md:grid-cols-2'>
					<div className='prose prose-lg max-w-none space-y-4 text-muted-foreground'>
						<p>
							Ol√° a todos! üëã Bem-vindos √† nossa terceira confer√™ncia. Hoje,
							vamos mergulhar em dois dos pilares mais fundamentais da
							programa√ß√£o: Estruturas de Controlo de Fluxo e Modularidade.
						</p>
						<p>
							At√© agora, o vosso c√≥digo executa de cima para baixo. Mas o mundo
							real n√£o √© linear. Precisamos que os nossos programas tomem
							decis√µes, repitam tarefas e sejam organizados. √â isso que vamos
							aprender hoje.
						</p>
						<p>
							Imaginem o vosso c√≥digo como uma receita de bolo üç∞. Seguir
							linearmente √© f√°cil, mas limitado. E se a receita dissesse: &quot;
							<em>Se for um bolo de chocolate, adicionar cacau</em>&quot;? Isso
							√© uma <strong>decis√£o</strong>. Ou: &quot;
							<em>
								Enquanto a massa n√£o estiver homog√©nea, continuar a misturar
							</em>
							&quot;? Isso √© uma <strong>repeti√ß√£o</strong>.
						</p>
					</div>
					<div className='rounded-lg border bg-card/50 p-6'>
						<h4 className='mb-4 flex items-center gap-2 text-xl font-bold font-headline'>
							<BookOpen className='text-primary' />
							Agenda da Confer√™ncia
						</h4>
						<ul className='space-y-3'>
							<li className='flex items-center gap-3'>
								<GitCompare className='h-5 w-5 text-primary' />
								<span>Estruturas de Decis√£o (if, else, elif)</span>
							</li>
							<li className='flex items-center gap-3'>
								<RotateCcw className='h-5 w-5 text-primary' />
								<span>Estruturas de Repeti√ß√£o (while, for)</span>
							</li>
							<li className='flex items-center gap-3'>
								<ShieldCheck className='h-5 w-5 text-primary' />
								<span>Gest√£o de Erros (try-except)</span>
							</li>
							<li className='flex items-center gap-3'>
								<FunctionSquare className='h-5 w-5 text-primary' />
								<span>Modularidade com Fun√ß√µes e Classes</span>
							</li>
						</ul>
					</div>
				</div>
			</LectureSection>

			{/* Block 2: Decision Structures */}
			<LectureSection
				title='Bloco 2: Estruturas de Decis√£o'
				subtitle='O poder do "Se"'
			>
				<div className='grid grid-cols-1 gap-6 '>
					<FeatureCard icon={<GitCommit size={24} />} title='if'>
						<p>
							A decis√£o mais simples. Avalia uma condi√ß√£o e, se for Verdadeira,
							executa um bloco de c√≥digo.
						</p>
						<CodeBlock
							language='python'
							code={`idade = int(input("Idade? "))
if idade >= 18:
    print("√â maior de idade.")`}
						/>
					</FeatureCard>
					<FeatureCard icon={<GitFork size={24} />} title='if-else'>
						<p>
							Uma decis√£o com um caminho alternativo. Se a condi√ß√£o for Falsa, o
							bloco <code>else</code> √© executado. √â um ou outro.
						</p>
						<CodeBlock
							language='python'
							code={`temperatura = 22
if temperatura > 25:
    print("Est√° calor!")
else:
    print("N√£o est√° calor.")`}
						/>
					</FeatureCard>
					<FeatureCard icon={<GitMerge size={24} />} title='if-elif-else'>
						<p>
							Para m√∫ltiplas condi√ß√µes em cadeia. A primeira condi√ß√£o Verdadeira
							√© executada e o resto √© ignorado.
						</p>
						<CodeBlock
							language='python'
							code={`nota = 85
if nota >= 90:
    print("A")
elif nota >= 80:
    print("B") # Executa isto e para
else:
    print("C")`}
						/>
					</FeatureCard>
				</div>
				<Callout title='Nota R√°pida: switch-case'>
					<p>
						Algumas linguagens (C++, Java) t√™m uma estrutura <code>switch</code>{" "}
						para testar igualdade m√∫ltipla, que pode ser mais leg√≠vel que v√°rios{" "}
						<code>elif</code>.
					</p>
					<CodeBlock
						language='csharp'
						code={`// C# (n√£o funciona em Python)
switch (diaDaSemana) {
    case 1: nome = "Segunda"; break;
    case 2: nome = "Ter√ßa"; break;
    default: nome = "Outro dia"; break;
}`}
					/>
				</Callout>
			</LectureSection>

			{/* Block 3: Repetition Structures */}
			<LectureSection
				title='Bloco 3: Estruturas de Repeti√ß√£o (Loops)'
				subtitle='Repetir tarefas de forma inteligente'
			>
				<div className='space-y-8'>
					<div className='grid grid-cols-1 items-start gap-8 md:grid-cols-2'>
						<div>
							<h3 className='flex items-center gap-2 text-2xl font-bold font-headline'>
								<Repeat className='text-primary' />O Loop Condicional: `while`
							</h3>
							<p className='mt-2 text-muted-foreground'>
								Executa um bloco de c√≥digo repetidamente enquanto uma condi√ß√£o
								for Verdadeira. √â ideal quando n√£o sabemos o n√∫mero exato de
								itera√ß√µes.
							</p>
							<Callout title='Cuidado: Loops Infinitos!' type='danger'>
								<p>
									Se a condi√ß√£o do `while` nunca se tornar Falsa, o programa
									ficar√° preso para sempre. Certifique-se sempre de que a
									vari√°vel da condi√ß√£o √© atualizada dentro do loop.
								</p>
							</Callout>
						</div>
						<CodeBlock
							language='python'
							code={`# Contagem decrescente
contador = 5
while contador > 0:
    print(contador)
    contador -= 1 # Essencial para evitar loop infinito
print("Lan√ßar!")`}
						/>
					</div>

					<div className='grid grid-cols-1 items-start gap-8 md:grid-cols-2'>
						<div>
							<h3 className='flex items-center gap-2 text-2xl font-bold font-headline'>
								<Repeat className='text-primary' />O Loop Contado: `for`
							</h3>
							<p className='mt-2 text-muted-foreground'>
								Perfeito para iterar sobre uma sequ√™ncia (lista, range, etc.).
								Executa o bloco de c√≥digo uma vez para cada item na sequ√™ncia,
								de forma mais limpa que um `while`.
							</p>
						</div>
						<CodeBlock
							language='python'
							code={`frutas = ["Ma√ß√£", "Banana", "Cereja"]
for fruta in frutas:
    print(f"Eu gosto de {fruta}")`}
						/>
					</div>

					<div className='grid grid-cols-1 gap-6 lg:grid-cols-2'>
						<FeatureCard icon={<StopCircle size={24} />} title='break'>
							<p>
								Interrompe e sai do loop imediatamente. √ötil para parar a busca
								assim que um item √© encontrado.
							</p>
							<CodeBlock
								language='python'
								code={`for nome in nomes:
    if nome == "Ana":
        print("Encontrado!")
        break # Para o loop`}
							/>
						</FeatureCard>
						<FeatureCard icon={<SkipForward size={24} />} title='continue'>
							<p>
								Salta a itera√ß√£o atual e avan√ßa para a pr√≥xima. O loop n√£o
								termina. √ötil para ignorar certos itens.
							</p>
							<CodeBlock
								language='python'
								code={`for i in range(1, 11):
    if i % 2 == 0:
        continue # Salta os n√∫meros pares
    print(i) # S√≥ imprime √≠mpares`}
							/>
						</FeatureCard>
					</div>
					<div>
						<h3 className='mb-4 flex items-center gap-2 text-2xl font-bold font-headline'>
							<ShieldCheck className='text-primary' />
							Gest√£o de Erros com `try-except`
						</h3>
						<p className='mb-4 text-muted-foreground'>
							Quando uma opera√ß√£o pode falhar (ex: converter &quot;abc&quot; em
							n√∫mero), o programa pode &quot;crashar&quot;. Para evitar isso,
							usamos o bloco <code>try-except</code>, que nos permite
							&quot;tentar&quot; executar um c√≥digo e &quot;apanhar&quot; o erro
							se ele acontecer, de forma a podermos lidar com ele sem parar o
							programa.
						</p>
						<CodeBlock
							language='python'
							code={`while True: # Loop para pedir at√© ser v√°lido
    try:
        idade_str = input("Qual √© a sua idade? ")
        idade_num = int(idade_str)
        break # Se a convers√£o funcionar, sai do loop
    except ValueError:
        # Se falhar, informa e o loop repete-se
        print("Erro: Isso n√£o √© um n√∫mero. Tente novamente.")

print(f"Obrigado! A sua idade √© {idade_num}.")`}
						/>
					</div>
				</div>
			</LectureSection>

			{/* Block 4: Modularity */}
			<LectureSection
				title='Bloco 4: Modularidade'
				subtitle='Organizando o c√≥digo como um profissional'
			>
				<div className='grid grid-cols-1 gap-8 md:grid-cols-2'>
					<FeatureCard
						icon={<FunctionSquare size={24} />}
						title='Fun√ß√µes: O Princ√≠pio DRY'
						className='md:col-span-2'
					>
						<p>
							Para evitar repetir c√≥digo (<strong>D</strong>on&apos;t{" "}
							<strong>R</strong>epeat <strong>Y</strong>ourself), agrupamos
							l√≥gica reutiliz√°vel em <strong>fun√ß√µes</strong>. Uma fun√ß√£o √© um
							bloco de c√≥digo nomeado que podemos &quot;chamar&quot; quando
							precisarmos. Elas podem receber dados (<strong>par√¢metros</strong>
							) e devolver um resultado (<strong>return</strong>).
						</p>
						<CodeBlock
							language='python'
							code={`# 'def' define a fun√ß√£o, 'a' e 'b' s√£o par√¢metros
def somar(a, b):
    total = a + b
    return total # 'return' devolve o valor

# Chamamos a fun√ß√£o e guardamos o resultado
resultado = somar(5, 3) # resultado ser√° 8`}
						/>
					</FeatureCard>
					<FeatureCard icon={<Blocks size={24} />} title='Escopo de Vari√°veis'>
						<p>
							<strong>Locais:</strong> Criadas dentro de uma fun√ß√£o, s√≥ existem
							l√° dentro. Isto evita conflitos.
							<br />
							<strong>Globais:</strong> Criadas fora, acess√≠veis em todo o lado.
							Devem ser usadas com cuidado para evitar confus√£o.
						</p>
						<CodeBlock
							language='python'
							code={`x = 10 # Global
def minha_funcao():
    y = 5 # Local
    print(x) # Acede √† global
# print(y) # Daria erro!`}
						/>
					</FeatureCard>
					<FeatureCard icon={<Package size={24} />} title='M√≥dulos e Imports'>
						<p>
							Dividimos o c√≥digo em v√°rios ficheiros (m√≥dulos). Usamos{" "}
							<code>import</code> para aceder a fun√ß√µes de outros ficheiros,
							sejam eles nossos ou de bibliotecas externas.
						</p>
						<CodeBlock
							language='python'
							code={`# Em geometria.py -> def area_circulo(r): ...

# Em main.py
import geometria
geometria.area_circulo(10)`}
						/>
					</FeatureCard>
					<FeatureCard
						icon={<Box size={24} />}
						title='Classes e Objetos (POO)'
						className='md:col-span-2'
					>
						<p>
							A Programa√ß√£o Orientada a Objetos (POO) permite-nos criar os
							nossos pr√≥prios tipos de dados. Uma <strong>Classe</strong> √© um
							molde (ex: a planta de um <code>Carro</code>) e um{" "}
							<strong>Objeto</strong> √© a inst√¢ncia real constru√≠da a partir
							desse molde (ex: <code>meu_carro_vermelho</code>). Isto agrupa
							dados (atributos) e as fun√ß√µes que operam nesses dados (m√©todos).
						</p>
						<CodeBlock
							language='python'
							code={`class Estudante:
    def __init__(self, nome_input):
        self.nome = nome_input # Atributo

    def apresentar_se(self): # M√©todo
        print(f"Ol√°! O meu nome √© {self.nome}.")

# Criar um objeto (inst√¢ncia) da classe
estudante_ana = Estudante("Ana Silva")
# Chamar o seu m√©todo
estudante_ana.apresentar_se()`}
						/>
					</FeatureCard>
				</div>
			</LectureSection>

			{/* Block 5: Integrated Example */}
			<LectureSection
				title='Bloco 5: Exemplo Integrador'
				subtitle='Juntando todos os conceitos'
			>
				<p className='prose prose-lg max-w-none text-muted-foreground'>
					Vamos criar um mini-programa de gest√£o de pauta, dividido em dois
					ficheiros. Este exemplo usa classes, fun√ß√µes, loops, decis√µes e gest√£o
					de erros.
				</p>
				<div className='mt-8 grid grid-cols-1 gap-8 lg:grid-cols-2'>
					<div className='rounded-lg border bg-card/50 p-4'>
						<h4 className='mb-2 flex items-center gap-2 font-mono text-sm font-semibold'>
							<FileCode className='text-primary' />
							gestor_alunos.py
						</h4>
						<CodeBlock
							language='python'
							code={`# 1. A CLASSE que modela os nossos dados
class Aluno:
    def __init__(self, nome, numero):
        self.nome = nome
        self.numero = numero
        self.nota = 0

    def dar_nota(self, nota_atribuida):
        # 2. Decis√£o (IF) para validar dados
        if 0 <= nota_atribuida <= 20:
            self.nota = nota_atribuida
            return True
        else:
            print("Erro: A nota deve ser entre 0 e 20.")
            return False

    def apresentar(self):
        print(f"Aluno: {self.nome} - Nota: {self.nota}")

# 3. UMA FUN√á√ÉO de ajuda
def pedir_nota_aluno():
    # 4. Gest√£o de Erros (TRY-EXCEPT)
    try:
        nota_str = input("Introduza a nota (0-20): ")
        return int(nota_str)
    except ValueError:
        print("Input inv√°lido.")
        return None`}
						/>
					</div>
					<div className='rounded-lg border bg-card/50 p-4'>
						<h4 className='mb-2 flex items-center gap-2 font-mono text-sm font-semibold'>
							<PlayCircle className='text-primary' />
							main.py
						</h4>
						<CodeBlock
							language='python'
							code={`# 5. IMPORTA√á√ÉO do nosso m√≥dulo
from gestor_alunos import Aluno, pedir_nota_aluno

def main():
    lista_da_turma = [
        Aluno("Beatriz Costa", 1001),
        Aluno("Carlos Dias", 1002)
    ]

    # 6. LOOP (FOR) sobre objetos
    for aluno in lista_da_turma:
        print(f"\\nA avaliar: {aluno.nome}")

        # 7. LOOP (WHILE) para input correto
        while True:
            nota = pedir_nota_aluno()
            if nota is not None and aluno.dar_nota(nota):
                break # Sai do while se a nota for v√°lida

    print("\\n--- Pauta Final ---")
    for aluno in lista_da_turma:
        aluno.apresentar()

# Ponto de entrada do programa
if __name__ == "__main__":
    main()`}
						/>
					</div>
				</div>
			</LectureSection>

			{/* Conclusion & Homework */}
			<LectureSection
				title='Bloco 6: Conclus√£o e Tarefa'
				subtitle='Ponha em pr√°tica o que aprendeu'
			>
				<Task title='Tarefa: Gestor de Turma Interativo'>
					<p className='font-semibold text-foreground'>
						‚úÖ Hoje vimos como controlar o fluxo do nosso c√≥digo com{" "}
						<strong>decis√µes</strong> (if/else) e <strong>repeti√ß√µes</strong>{" "}
						(loops), e como organizar tudo com <strong>fun√ß√µes</strong>,{" "}
						<strong>classes</strong> e <strong>m√≥dulos</strong>. Agora, √© a
						vossa vez de expandir o nosso projeto!
					</p>
					<ol className='list-decimal space-y-2 pl-5 text-muted-foreground'>
						<li>
							<strong>
								Melhorar a Classe <code>Aluno</code> (em{" "}
								<code>gestor_alunos.py</code>):
							</strong>
							<ul className='list-disc space-y-2 pl-5 text-muted-foreground'>
								<li>
									Adicione um novo atributo no{" "}
									<span className='font-bold'>constructor</span>:{" "}
									<code>self.faltas = 0</code>.
								</li>
								<li>
									Crie um novo m√©todo{" "}
									<code className='font-bold'>marcar_falta(self)</code> que faz{" "}
									<code>self.faltas += 1</code>.
								</li>
								<li>
									Modifique o m√©todo{" "}
									<code className='font-bold'>apresentar(self)</code> para
									mostrar tamb√©m o n√∫mero de faltas.
								</li>
							</ul>
						</li>
						<li>
							<strong>
								Melhorar o <code>main.py</code>:
							</strong>
							<ul className='list-disc space-y-2 pl-5 text-muted-foreground'>
								<li>
									Crie uma fun√ß√£o{" "}
									<code className='font-bold'>mostrar_menu()</code> que imprime
									op√ß√µes para o utilizador: 1. Dar notas, 2. Marcar falta, 3.
									Ver pauta, 4. Sair.
								</li>
								<li>
									Coloque a l√≥gica principal num loop <code>while True</code>{" "}
									que corre o menu.
								</li>
								<li>
									Use <code>if/elif/else</code> para executar a l√≥gica com base
									na escolha. Se for &quot;4&quot;, use <code>break</code> para
									sair.
								</li>
							</ul>
						</li>
					</ol>
				</Task>
			</LectureSection>

			<LectureSection title='Bloco 7: Perguntas e Respostas (Q&A)'>
				<div className='prose prose-lg max-w-none text-muted-foreground rounded-lg border bg-card/50 p-4'>
					<p className='text-xl'>
						Agora √© a vossa vez! Que d√∫vidas t√™m? Algum conceito que n√£o ficou
						claro?
					</p>
				</div>
			</LectureSection>
		</main>
	);
};

export default LecturePage;
