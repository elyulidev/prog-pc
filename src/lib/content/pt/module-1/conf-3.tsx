import { CodeBlock } from "@/components/code-block";
import { Callout } from "@/components/lecture/callout";
import { LectureSection } from "@/components/lecture/lecture-section";
import { Task } from "@/components/lecture/task";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import React from "react";

const LecturePage = () => {
	return (
		<div className='space-y-12'>
			{/* Conference Header */}
			<header className='rounded-lg bg-primary/5 p-8'>
				<p className='text-lg font-semibold text-primary'>
					M√≥dulo I: Fundamentos de Python e L√≥gica Algor√≠tmica
				</p>
				<h1 className='text-4xl font-bold tracking-tight lg:text-5xl font-headline'>
					Confer√™ncia 3: Estruturas de Controlo de Fluxo e Modularidade
				</h1>
				<p className='mt-4 text-lg text-muted-foreground max-w-3xl'>
					Nesta confer√™ncia, vamos mergulhar em dois dos pilares mais
					fundamentais da programa√ß√£o: Estruturas de Controlo de Fluxo e
					Modularidade. Aprenderemos como fazer os nossos programas tomar
					decis√µes, repetir tarefas e serem organizados de forma eficiente.
				</p>
			</header>

			{/* Introduction */}
			<LectureSection title='Bloco 1: Introdu√ß√£o'>
				<Card>
					<CardHeader>
						<CardTitle>Boas-vindas e Agenda</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<p>
							Ol√° a todos! üëã Bem-vindos √† nossa terceira confer√™ncia. Hoje,
							vamos mergulhar em dois dos pilares mais fundamentais da
							programa√ß√£o: Estruturas de Controlo de Fluxo e Modularidade.
						</p>
						<p>
							At√© agora, provavelmente escreveram c√≥digo que executa de cima
							para baixo, uma linha de cada vez, e termina. Mas o mundo real n√£o
							√© assim t√£o linear. Precisamos que os nossos programas tomem
							decis√µes, repitam tarefas e sejam organizados. √â exatamente isso
							que vamos aprender hoje.
						</p>
						<p>A nossa agenda para os pr√≥ximos 90 minutos:</p>
						<ol>
							<li>
								<strong>O que √© o Controlo de Fluxo?</strong>
								<ul>
									<li>A execu√ß√£o sequencial (o padr√£o).</li>
									<li>A necessidade de desvio: Decis√µes e Repeti√ß√µes.</li>
								</ul>
							</li>
							<li>
								<strong>Parte 1: Estruturas de Decis√£o (O "Se")</strong>
								<ul>
									<li>
										<code>if</code>, <code>if-else</code>,{" "}
										<code>if-elif-else</code>
									</li>
									<li>Operadores L√≥gicos (AND, OR, NOT)</li>
									<li>
										Estruturas <code>switch-case</code> (ou equivalentes)
									</li>
								</ul>
							</li>
							<li>
								<strong>Parte 2: Estruturas de Repeti√ß√£o (Os "Loops")</strong>
								<ul>
									<li>
										<code>while</code> (enquanto)
									</li>
									<li>
										<code>for</code> (para)
									</li>
									<li>
										Controlo de loops: <code>break</code> e{" "}
										<code>continue</code>
									</li>
									<li>Manejar erros. Excep√ß√µes(try-except)</li>
								</ul>
							</li>
							<li>
								<strong>Parte 3: Modularidade (O "Como Organizar")</strong>
								<ul>
									<li>O que s√£o fun√ß√µes (ou m√©todos)?</li>
									<li>Porqu√™ usar fun√ß√µes? (O Princ√≠pio DRY)</li>
									<li>Anatomia de uma fun√ß√£o: par√¢metros e retorno.</li>
									<li>Escopo de vari√°veis (local vs. global).</li>
									<li>
										Modularidade Real: Importando Ficheiros Externos. Vari√°vel{" "}
										<code>__name__</code>
									</li>
									<li>Classes e Objetos(breve introdu√ß√£o)</li>
								</ul>
							</li>
							<li>
								<strong>Exemplo Pr√°ctico Integrador</strong>
							</li>
							<li>
								<strong>Conclus√£o e Tarefa Extraclasse</strong>
							</li>
						</ol>
					</CardContent>
				</Card>
				<Card>
					<CardHeader>
						<CardTitle>O Fluxo de Controlo Padr√£o</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<p>Imaginem que o vosso c√≥digo √© uma receita de bolo. üç∞</p>
						<ol>
							<li>Pegar na ta√ßa.</li>
							<li>Adicionar farinha.</li>
							<li>Adicionar ovos.</li>
							<li>Adicionar a√ß√∫car.</li>
							<li>Misturar tudo.</li>
							<li>Levar ao forno.</li>
							<li>Esperar 30 minutos.</li>
							<li>Retirar.</li>
						</ol>
						<p>
							Isto √© um fluxo sequencial. Cada instru√ß√£o √© executada exatamente
							uma vez, na ordem em que est√° escrita. √â simples, mas muito
							limitado.
						</p>
						<p>
							E se a receita dissesse: "Se for um bolo de chocolate, adicionar
							cacau"?
						</p>
						<p>
							Ou: "Enquanto a massa n√£o estiver homog√©nea, continuar a
							misturar"?
						</p>
						<p>
							Ou: "Para preparar a forma: Repetir 3 vezes o processo de untar e
							polvilhar"?
						</p>
						<p>
							De repente, a nossa receita simples tornou-se num algoritmo.
							Deix√°mos de ter um caminho √∫nico. Ganh√°mos o poder de tomar
							decis√µes e de repetir tarefas.
						</p>
						<p>
							Isto √© o <strong>Controlo de Fluxo</strong>: a capacidade de
							alterar a ordem pela qual as instru√ß√µes s√£o executadas, com base
							em certas condi√ß√µes.
						</p>
						<p>
							E a <strong>Modularidade</strong>? Imaginem que a "receita" de
							"fazer a cobertura" √© t√£o complexa que a escrevemos numa p√°gina
							separada. Sempre que precisamos da cobertura, em vez de reescrever
							todos os passos, apenas dizemos: "Ver p√°gina 5: 'Fazer
							Cobertura'". Isso √© uma fun√ß√£o! √â a base da modularidade: agrupar
							c√≥digo reutiliz√°vel.
						</p>
					</CardContent>
				</Card>
			</LectureSection>

			{/* Decision Structures */}
			<LectureSection title='Bloco 2: Estruturas de Decis√£o'>
				<Card>
					<CardHeader>
						<CardTitle>A Decis√£o Simples: if</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<p>
							O <code>if</code> (que significa "se") √© a estrutura de decis√£o
							mais simples. Ele avalia uma condi√ß√£o (algo que s√≥ pode ser
							Verdadeiro ou Falso) e, se for verdadeira, executa um bloco de
							c√≥digo.
						</p>
						<p>
							Imaginem um fluxograma. O fluxo normal √© uma seta a apontar para
							baixo. De repente, encontramos um losango üíé. Dentro dele, est√° a
							pergunta: "Est√° a chover?".
						</p>
						<ul>
							<li>
								Se a resposta for "Sim" (Verdadeiro), uma seta desvia-se para um
								lado e executa a caixa "Levar guarda-chuva".
							</li>
							<li>
								Se a resposta for "N√£o" (Falso), a seta simplesmente ignora essa
								caixa.
							</li>
						</ul>
						<p>
							No final, ambos os caminhos voltam a juntar-se para continuar o
							programa.
						</p>
						<CodeBlock
							language='python'
							code={`
# O programa pergunta a idade
idade = int(input("Qual √© a sua idade? "))

# A condi√ß√£o √© (idade >= 18)
# Isto avalia para Verdadeiro (True) ou Falso (False)
if idade >= 18:
    # Este bloco S√ì executa se a condi√ß√£o for Verdadeira
    print("Voc√™ √© maior de idade.")
    print("J√° pode tirar a carta de condu√ß√£o.")

# Esta linha est√° fora do bloco "if", por isso executa SEMPRE
print("O programa terminou.")
`}
						/>
					</CardContent>
				</Card>
				<Card>
					<CardHeader>
						<CardTitle>A Decis√£o Bin√°ria: if-else</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<p>
							Isto √© √≥timo, mas e se quisermos fazer algo espec√≠fico quando a
							condi√ß√£o √© falsa? Em vez de apenas ignorar, queremos um caminho
							alternativo. Usamos o <code>else</code> (que significa "sen√£o").
						</p>
						<p>Voltamos ao nosso losango üíé: "Est√° a chover?".</p>
						<ul>
							<li>
								Se "Sim" (Verdadeiro), seguimos o caminho A: "Levar
								guarda-chuva".
							</li>
							<li>
								Se "N√£o" (Falso), seguimos o caminho B: "Levar √≥culos de sol".
							</li>
						</ul>
						<p>
							<strong>Importante:</strong> √â imposs√≠vel seguir os dois caminhos.
							√â um ou outro.
						</p>
						<CodeBlock
							language='python'
							code={`
temperatura = 22

if temperatura > 25:
    # Bloco Verdadeiro
    print("Est√° calor! Ligue o ar condicionado.")
else:
    # Bloco Falso
    print("Est√° uma temperatura agrad√°vel.")
    print("N√£o √© preciso ligar o ar condicionado.")

print("Fim da verifica√ß√£o do tempo.")
`}
						/>
					</CardContent>
				</Card>
				<Card>
					<CardHeader>
						<CardTitle>M√∫ltiplas Decis√µes: if-elif-else</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<p>
							E se tivermos mais de duas op√ß√µes? A solu√ß√£o √© o <code>elif</code>{" "}
							(uma contra√ß√£o de "else if"). O <code>elif</code> permite-nos
							testar uma nova condi√ß√£o apenas se a condi√ß√£o anterior for falsa.
						</p>
						<CodeBlock
							language='python'
							code={`
nota = 85
if nota >= 90:
    print("Classifica√ß√£o: A")
elif nota >= 80:  # S√≥ √© testado se (nota >= 90) for FALSO
    print("Classifica√ß√£o: B")
elif nota >= 70:  # S√≥ √© testado se (nota >= 80) for FALSO
    print("Classifica√ß√£o: C")
elif nota >= 60:
    print("Classifica√ß√£o: D")
else:  # S√≥ executa se TODAS as condi√ß√µes acima forem FALSAS
    print("Classifica√ß√£o: F (Reprovado)")
`}
						/>
						<Callout title='Nota R√°pida: switch-case'>
							<p>
								Algumas linguagens (como C++, Java, C#) t√™m uma estrutura
								especial para verificar se uma vari√°vel √© igual a m√∫ltiplos
								valores diferentes, chamada <code>switch</code>.
							</p>
							<CodeBlock
								language='csharp'
								code={`
// Exemplo em C# (n√£o funciona em Python)
int diaDaSemana = 3;
string nomeDoDia;
switch (diaDaSemana)
{
    case 1:
        nomeDoDia = "Segunda-feira";
        break; // O "break" √© vital!
    case 2:
        nomeDoDia = "Ter√ßa-feira";
        break;
    case 3:
        nomeDoDia = "Quarta-feira";
        break;
    default: // Equivalente ao "else"
        nomeDoDia = "Fim de semana";
        break;
}
Console.WriteLine(nomeDoDia); // Imprime "Quarta-feira"
`}
							/>
						</Callout>
					</CardContent>
				</Card>
			</LectureSection>

			{/* Repetition Structures */}
			<LectureSection title='Bloco 3: Estruturas de Repeti√ß√£o (Loops)'>
				<Card>
					<CardHeader>
						<CardTitle>O Loop Condicional: while</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<p>
							O loop <code>while</code> (enquanto) √© o mais simples. Ele testa
							uma condi√ß√£o. Se for verdadeira, executa o bloco de c√≥digo. Depois
							volta ao topo e testa a condi√ß√£o novamente, at√© que a condi√ß√£o se
							torne Falsa.
						</p>
						<CodeBlock
							language='python'
							code={`
# Contagem decrescente para o lan√ßamento
contador = 10
while contador > 0:
    print(f"T-menos {contador} segundos...")
    # Passo CR√çTICO: temos de alterar a vari√°vel da condi√ß√£o!
    contador = contador - 1 # Ou contador -= 1
print("LAN√áAR! üöÄ")
`}
						/>
						<Callout title='Cuidado: Loops Infinitos' type='danger'>
							<p>
								O que acontece se nos esquecermos da linha{" "}
								<code>contador = contador - 1</code>? A condi√ß√£o{" "}
								<code>10 &gt; 0</code> ser√° sempre Verdadeira, e o programa
								ficar√° preso para sempre!
							</p>
							<CodeBlock
								language='python'
								code={`
# PERIGO: LOOP INFINITO!
numero_secreto = 7
palpite = 0
while palpite != numero_secreto:
    # O utilizador nunca tem a chance de mudar o palpite DENTRO do loop!
    print("Adivinhe o n√∫mero:")

# O c√≥digo correto teria o input DENTRO do loop.
`}
							/>
						</Callout>
					</CardContent>
				</Card>
				<Card>
					<CardHeader>
						<CardTitle>O Loop Contado: for</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<p>
							E se soubermos exatamente quantas vezes queremos repetir? Usamos o
							loop <code>for</code> (para), desenhado para iterar sobre uma
							sequ√™ncia de itens.
						</p>
						<CodeBlock
							language='python'
							code={`
# Queremos contar de 1 at√© 5.
# range(1, 6) gera a sequ√™ncia: 1, 2, 3, 4, 5

for numero in range(1, 6):
    print(f"O n√∫mero atual √© {numero}")

print("Loop 'for' terminado.")
`}
						/>
						<p>
							O <code>for</code> √© ainda mais poderoso. Pode iterar sobre
							qualquer cole√ß√£o, como uma lista de compras.
						</p>
						<CodeBlock
							language='python'
							code={`
lista_compras = ["Ma√ß√£s", "Leite", "P√£o", "Caf√©"]

print("Preciso de comprar:")
for item in lista_compras:
    print(f"- {item}")
`}
						/>
					</CardContent>
				</Card>
				<Card>
					<CardHeader>
						<CardTitle>Controlar o Loop: break e continue</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<p>
							<strong>
								<code>break</code>
							</strong>{" "}
							(Quebrar/Parar): Sai imediatamente do loop.
						</p>
						<CodeBlock
							language='python'
							code={`
nomes = ["Rui", "Maria", "Pedro", "Ana", "Sofia", "Miguel"]
nome_procurado = "Ana"

for nome in nomes:
    print(f"A verificar... {nome}")
    if nome == nome_procurado:
        print("Encontrado!")
        break  # Sai do loop 'for' imediatamente!
`}
						/>
						<p>
							<strong>
								<code>continue</code>
							</strong>{" "}
							(Continuar/Saltar): Salta o resto da itera√ß√£o atual e passa para a
							pr√≥xima.
						</p>
						<CodeBlock
							language='python'
							code={`
for i in range(1, 11): # N√∫meros de 1 a 10
    # Se o n√∫mero for par...
    if i % 2 == 0:
        continue # ...salta o resto do c√≥digo e vai para a pr√≥xima itera√ß√£o

    # Este c√≥digo s√≥ executa para n√∫meros √≠mpares
    print(f"Processando n√∫mero √≠mpar: {i}")
`}
						/>
					</CardContent>
				</Card>
				<Card>
					<CardHeader>
						<CardTitle>Gest√£o de Erros: try-except</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<p>
							O que acontece quando o nosso c√≥digo espera uma coisa, mas o
							utilizador faz outra? O programa pode "crashar". Para evitar isso,
							usamos o bloco <code>try-except</code>.
						</p>
						<p>
							O bloco <code>try-except</code> permite-nos "tentar" executar um
							c√≥digo perigoso. Se falhar, em vez de crashar, ele salta para um
							bloco de "exce√ß√£o".
						</p>
						<CodeBlock
							language='python'
							code={`
try:
    # Bloco perigoso: Tentamos fazer a convers√£o
    idade_str = input("Qual √© a sua idade? ")
    idade_num = int(idade_str)
    print(f"Daqui a 10 anos ter√° {idade_num + 10} anos.")
except ValueError:
    # Bloco de seguran√ßa: S√≥ executa se o 'try' falhar
    print("Erro: Por favor, introduza um N√öMERO v√°lido (ex: 25).")

print("O programa continua...")
`}
						/>
						<p>
							Podemos combinar isto com um <code>while</code> para for√ßar uma
							resposta v√°lida:
						</p>
						<CodeBlock
							language='python'
							code={`
while True: # Loop infinito
    try:
        idade_str = input("Qual √© a sua idade? ")
        idade_num = int(idade_str)
        # Se a convers√£o funcionar, sa√≠mos do loop
        break
    except ValueError:
        # Se falhar, informamos e o loop repete-se
        print("Erro: Isso n√£o √© um n√∫mero. Tente novamente.")

print(f"Obrigado! A sua idade √© {idade_num}.")
`}
						/>
					</CardContent>
				</Card>
			</LectureSection>
			{/* Modularity and Functions */}
			<LectureSection title='Bloco 4: Modularidade e Fun√ß√µes'>
				<Card>
					<CardHeader>
						<CardTitle>O Problema: Repeti√ß√£o de C√≥digo</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<p>
							Repetir o mesmo c√≥digo em v√°rios locais √© mau porque aumenta a
							chance de erros e dificulta a manuten√ß√£o. Isto viola o princ√≠pio{" "}
							<strong>DRY: Don't Repeat Yourself</strong> (N√£o te Repitas).
						</p>
					</CardContent>
				</Card>
				<Card>
					<CardHeader>
						<CardTitle>A Solu√ß√£o: Fun√ß√µes</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<p>
							A solu√ß√£o √© "empacotar" essa l√≥gica repetida numa{" "}
							<strong>fun√ß√£o</strong>, um bloco de c√≥digo nomeado que podemos
							"chamar" (executar) sempre que quisermos.
						</p>
						<h5>1. Definir a Fun√ß√£o</h5>
						<CodeBlock
							language='python'
							code={`
# def = "definir fun√ß√£o"
# saudacao = nome da fun√ß√£o
# (nome_utilizador) = par√¢metro (dados que a fun√ß√£o recebe)
def saudacao(nome_utilizador):
    print("--------------------")
    print(f"Bem-vindo, {nome_utilizador}!")
    print("O sistema est√° pronto.")
    print("--------------------")
`}
						/>
						<h5>2. Chamar (Invocar) a Fun√ß√£o</h5>
						<CodeBlock
							language='python'
							code={`
saudacao("Jo√£o")
saudacao("Admin")
`}
						/>
						<p>Vantagens:</p>
						<ul>
							<li>
								<strong>Reutiliza√ß√£o:</strong> Escrevemos uma vez, usamos
								muitas.
							</li>
							<li>
								<strong>Manuten√ß√£o:</strong> Alteramos a l√≥gica num √∫nico local.
							</li>
							<li>
								<strong>Abstra√ß√£o:</strong> Escondemos a complexidade.
							</li>
						</ul>
					</CardContent>
				</Card>
				<Card>
					<CardHeader>
						<CardTitle>Anatomia de uma Fun√ß√£o: Par√¢metros e Retorno</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<ul>
							<li>
								<strong>Par√¢metros (Input):</strong> Os dados que a fun√ß√£o
								recebe.
							</li>
							<li>
								<strong>Valor de Retorno (Output):</strong> Os dados que a
								fun√ß√£o devolve.
							</li>
						</ul>
						<CodeBlock
							language='python'
							code={`
# Esta fun√ß√£o recebe dois n√∫meros (a, b) e retorna um valor
def somar(a, b):
    total = a + b
    return total # A palavra-chave 'return' envia o resultado de volta

# Chamamos a fun√ß√£o e guardamos o seu resultado numa vari√°vel
resultado_soma = somar(5, 3)
print(f"O resultado da soma √©: {resultado_soma}") # Imprime 8
`}
						/>
					</CardContent>
				</Card>
				<Card>
					<CardHeader>
						<CardTitle>Escopo de Vari√°veis (Local vs. Global)</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<p>
							<strong>Vari√°veis Locais:</strong> Criadas dentro de uma fun√ß√£o,
							s√≥ existem dentro dela. Isto √© bom para isolamento.
						</p>
						<p>
							<strong>Vari√°veis Globais:</strong> Definidas fora de qualquer
							fun√ß√£o, podem ser lidas por qualquer uma. √â m√° pr√°tica
							modific√°-las frequentemente.
						</p>
						<CodeBlock
							language='python'
							code={`
# Vari√°vel Global
nome_app = "O Meu Super Programa"

def minha_funcao():
    variavel_local = 100 # Vari√°vel Local
    print(f"Dentro da fun√ß√£o, posso ler a global: {nome_app}")
    print(f"E a local: {variavel_local}")

minha_funcao()
# print(variavel_local) # ISTO D√Å ERRO!
`}
						/>
					</CardContent>
				</Card>
				<Card>
					<CardHeader>
						<CardTitle>
							Modularidade Real: Importando Ficheiros Externos
						</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<p>
							Podemos dividir o nosso c√≥digo em m√∫ltiplos ficheiros (m√≥dulos) e
							usar a palavra-chave <code>import</code> para os reutilizar.
						</p>
						<h5>Ficheiro: geometria.py</h5>
						<CodeBlock
							language='python'
							code={`
# Dentro do ficheiro: geometria.py
def calcular_area_retangulo(comprimento, largura):
    return comprimento * largura
`}
						/>
						<h5>Ficheiro: main.py</h5>
						<CodeBlock
							language='python'
							code={`
# Dentro do ficheiro: main.py
import geometria

area = geometria.calcular_area_retangulo(10, 5)
print(f"A √°rea √© {area}")
`}
						/>
						<Callout title='O que √© if __name__ == "__main__"?'>
							<p>
								Esta √© uma constru√ß√£o padr√£o em Python que garante que o c√≥digo
								dentro dela s√≥ √© executado quando o ficheiro √© corrido
								diretamente, e n√£o quando √© importado como um m√≥dulo.
							</p>
						</Callout>
					</CardContent>
				</Card>
				<Card>
					<CardHeader>
						<CardTitle>
							Introdu√ß√£o √† Programa√ß√£o Orientada a Objetos (POO)
						</CardTitle>
					</CardHeader>
					<CardContent className='prose prose-lg max-w-none'>
						<p>
							E se pud√©ssemos criar os nossos pr√≥prios tipos de vari√°veis, que
							tivessem dados e fun√ß√µes "l√° dentro"?
						</p>
						<ul>
							<li>
								Uma <strong>Classe</strong> √© uma planta ou um molde (ex: a
								planta de um Carro).
							</li>
							<li>
								Um <strong>Objeto</strong> √© a coisa real constru√≠da a partir da
								planta (ex: o meu carro vermelho).
							</li>
						</ul>
						<h5>Criar e Usar uma Classe</h5>
						<CodeBlock
							language='python'
							code={`
# "class" √© a palavra-chave para definir a planta
class Estudante:
    # O "construtor" (__init__): chamado quando criamos um NOVO objeto
    def __init__(self, nome_input, idade_input):
        # Guardamos os dados DENTRO do objeto ("self")
        self.nome = nome_input
        self.idade = idade_input

    # Um "m√©todo" (uma fun√ß√£o que pertence √† classe)
    def apresentar_se(self):
        print(f"Ol√°! O meu nome √© {self.nome} e tenho {self.idade} anos.")

# Criar objetos (inst√¢ncias) a partir da classe
estudante_ana = Estudante("Ana Silva", 20)
estudante_rui = Estudante("Rui Mendes", 22)

# Chamar os seus m√©todos
estudante_ana.apresentar_se() # Ol√°! O meu nome √© Ana Silva e tenho 20 anos.
estudante_rui.apresentar_se() # Ol√°! O meu nome √© Rui Mendes e tenho 22 anos.
`}
						/>
					</CardContent>
				</Card>
			</LectureSection>
			<Task
				title='A sua primeira miss√£o: A √Årea de um C√≠rculo'
				description={`<ol className='list-decimal space-y-2 pl-5 text-muted-foreground'>
					<li>
						Melhorar a Classe <code>Aluno</code> (em{" "}
						<code>gestor_alunos.py</code>):
						<ul className='list-disc pl-5'>
							<li>
								Adicione um novo atributo no <code>__init__</code>:{" "}
								<code>self.faltas = 0</code>.
							</li>
							<li>
								Adicione um novo m√©todo: <code>marcar_falta(self)</code>. Este
								m√©todo deve simplesmente fazer <code>self.faltas += 1</code>.
							</li>
							<li>
								Modifique o m√©todo <code>apresentar(self)</code> para que tamb√©m
								mostre o n√∫mero de faltas.
							</li>
						</ul>
					</li>
					<li>
						Melhorar o <code>main.py</code>:
						<ul className='list-disc pl-5'>
							<li>
								Crie uma nova fun√ß√£o <code>mostrar_menu()</code> que imprime
								op√ß√µes para o utilizador:
								<ol className='list-decimal pl-5'>
									<li>Dar notas a todos os alunos.</li>
									<li>Marcar falta a um aluno.</li>
									<li>Ver pauta final.</li>
									<li>Sair.</li>
								</ol>
							</li>
							<li>
								Coloque o programa principal (o <code>main()</code>) dentro de
								um <code>while True:</code> que corre o menu.
							</li>
							<li>
								Use <code>if/elif/else</code> para correr a l√≥gica apropriada
								com base na escolha do utilizador. (Se escolher "4", use{" "}
								<code>break</code> para sair do loop <code>while</code>).
							</li>
							<li>
								Para a op√ß√£o "Marcar falta", ter√° de perguntar qual o aluno
								(pelo n√∫mero, por exemplo) e depois encontrar esse objeto{" "}
								<code>Aluno</code> na <code>lista_da_turma</code> para poder
								chamar o m√©todo <code>marcar_falta()</code>.
							</li>
						</ul>
					</li>
				</ol>`}
			/>
		</div>
	);
};

export default LecturePage;
